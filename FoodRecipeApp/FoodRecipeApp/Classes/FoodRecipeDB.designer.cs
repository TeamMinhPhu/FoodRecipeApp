#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FoodRecipeApp.Classes
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FoodRecipeDB")]
	public partial class FoodRecipeDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDISH(DISH instance);
    partial void UpdateDISH(DISH instance);
    partial void DeleteDISH(DISH instance);
    partial void InsertDISH_TYPE(DISH_TYPE instance);
    partial void UpdateDISH_TYPE(DISH_TYPE instance);
    partial void DeleteDISH_TYPE(DISH_TYPE instance);
    partial void InsertIMAGE(IMAGE instance);
    partial void UpdateIMAGE(IMAGE instance);
    partial void DeleteIMAGE(IMAGE instance);
    partial void InsertRECIPE(RECIPE instance);
    partial void UpdateRECIPE(RECIPE instance);
    partial void DeleteRECIPE(RECIPE instance);
    partial void InsertSEARCH(SEARCH instance);
    partial void UpdateSEARCH(SEARCH instance);
    partial void DeleteSEARCH(SEARCH instance);
    partial void InsertTYPEDB(TYPEDB instance);
    partial void UpdateTYPEDB(TYPEDB instance);
    partial void DeleteTYPEDB(TYPEDB instance);
    #endregion
		
		public FoodRecipeDBDataContext() : 
				base(global::FoodRecipeApp.Properties.Settings.Default.FoodRecipeDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FoodRecipeDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FoodRecipeDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FoodRecipeDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FoodRecipeDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DISH> DISHes
		{
			get
			{
				return this.GetTable<DISH>();
			}
		}
		
		public System.Data.Linq.Table<DISH_TYPE> DISH_TYPEs
		{
			get
			{
				return this.GetTable<DISH_TYPE>();
			}
		}
		
		public System.Data.Linq.Table<IMAGE> IMAGEs
		{
			get
			{
				return this.GetTable<IMAGE>();
			}
		}
		
		public System.Data.Linq.Table<RECIPE> RECIPEs
		{
			get
			{
				return this.GetTable<RECIPE>();
			}
		}
		
		public System.Data.Linq.Table<SEARCH> SEARCHes
		{
			get
			{
				return this.GetTable<SEARCH>();
			}
		}
		
		public System.Data.Linq.Table<TYPEDB> TYPEDBs
		{
			get
			{
				return this.GetTable<TYPEDB>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DISH")]
	public partial class DISH : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _DISH_NAME;
		
		private string _DISH_IMAGE;
		
		private string _DISH_DESCRIPTION;
		
		private string _DISH_INGREDIENT;
		
		private string _DISH_VIDEO;
		
		private System.Nullable<bool> _DISH_FAVORITE;
		
		private EntitySet<DISH_TYPE> _DISH_TYPEs;
		
		private EntitySet<RECIPE> _RECIPEs;
		
		private EntitySet<SEARCH> _SEARCHes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnDISH_NAMEChanging(string value);
    partial void OnDISH_NAMEChanged();
    partial void OnDISH_IMAGEChanging(string value);
    partial void OnDISH_IMAGEChanged();
    partial void OnDISH_DESCRIPTIONChanging(string value);
    partial void OnDISH_DESCRIPTIONChanged();
    partial void OnDISH_INGREDIENTChanging(string value);
    partial void OnDISH_INGREDIENTChanged();
    partial void OnDISH_VIDEOChanging(string value);
    partial void OnDISH_VIDEOChanged();
    partial void OnDISH_FAVORITEChanging(System.Nullable<bool> value);
    partial void OnDISH_FAVORITEChanged();
    #endregion
		
		public DISH()
		{
			this._DISH_TYPEs = new EntitySet<DISH_TYPE>(new Action<DISH_TYPE>(this.attach_DISH_TYPEs), new Action<DISH_TYPE>(this.detach_DISH_TYPEs));
			this._RECIPEs = new EntitySet<RECIPE>(new Action<RECIPE>(this.attach_RECIPEs), new Action<RECIPE>(this.detach_RECIPEs));
			this._SEARCHes = new EntitySet<SEARCH>(new Action<SEARCH>(this.attach_SEARCHes), new Action<SEARCH>(this.detach_SEARCHes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DISH_NAME", DbType="NVarChar(60)")]
		public string DISH_NAME
		{
			get
			{
				return this._DISH_NAME;
			}
			set
			{
				if ((this._DISH_NAME != value))
				{
					this.OnDISH_NAMEChanging(value);
					this.SendPropertyChanging();
					this._DISH_NAME = value;
					this.SendPropertyChanged("DISH_NAME");
					this.OnDISH_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DISH_IMAGE", DbType="NVarChar(150)")]
		public string DISH_IMAGE
		{
			get
			{
				return this._DISH_IMAGE;
			}
			set
			{
				if ((this._DISH_IMAGE != value))
				{
					this.OnDISH_IMAGEChanging(value);
					this.SendPropertyChanging();
					this._DISH_IMAGE = value;
					this.SendPropertyChanged("DISH_IMAGE");
					this.OnDISH_IMAGEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DISH_DESCRIPTION", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string DISH_DESCRIPTION
		{
			get
			{
				return this._DISH_DESCRIPTION;
			}
			set
			{
				if ((this._DISH_DESCRIPTION != value))
				{
					this.OnDISH_DESCRIPTIONChanging(value);
					this.SendPropertyChanging();
					this._DISH_DESCRIPTION = value;
					this.SendPropertyChanged("DISH_DESCRIPTION");
					this.OnDISH_DESCRIPTIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DISH_INGREDIENT", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string DISH_INGREDIENT
		{
			get
			{
				return this._DISH_INGREDIENT;
			}
			set
			{
				if ((this._DISH_INGREDIENT != value))
				{
					this.OnDISH_INGREDIENTChanging(value);
					this.SendPropertyChanging();
					this._DISH_INGREDIENT = value;
					this.SendPropertyChanged("DISH_INGREDIENT");
					this.OnDISH_INGREDIENTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DISH_VIDEO", DbType="VarChar(100)")]
		public string DISH_VIDEO
		{
			get
			{
				return this._DISH_VIDEO;
			}
			set
			{
				if ((this._DISH_VIDEO != value))
				{
					this.OnDISH_VIDEOChanging(value);
					this.SendPropertyChanging();
					this._DISH_VIDEO = value;
					this.SendPropertyChanged("DISH_VIDEO");
					this.OnDISH_VIDEOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DISH_FAVORITE", DbType="Bit")]
		public System.Nullable<bool> DISH_FAVORITE
		{
			get
			{
				return this._DISH_FAVORITE;
			}
			set
			{
				if ((this._DISH_FAVORITE != value))
				{
					this.OnDISH_FAVORITEChanging(value);
					this.SendPropertyChanging();
					this._DISH_FAVORITE = value;
					this.SendPropertyChanged("DISH_FAVORITE");
					this.OnDISH_FAVORITEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISH_DISH_TYPE", Storage="_DISH_TYPEs", ThisKey="ID", OtherKey="ID")]
		public EntitySet<DISH_TYPE> DISH_TYPEs
		{
			get
			{
				return this._DISH_TYPEs;
			}
			set
			{
				this._DISH_TYPEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISH_RECIPE", Storage="_RECIPEs", ThisKey="ID", OtherKey="ID")]
		public EntitySet<RECIPE> RECIPEs
		{
			get
			{
				return this._RECIPEs;
			}
			set
			{
				this._RECIPEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISH_SEARCH", Storage="_SEARCHes", ThisKey="ID", OtherKey="ID")]
		public EntitySet<SEARCH> SEARCHes
		{
			get
			{
				return this._SEARCHes;
			}
			set
			{
				this._SEARCHes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DISH_TYPEs(DISH_TYPE entity)
		{
			this.SendPropertyChanging();
			entity.DISH = this;
		}
		
		private void detach_DISH_TYPEs(DISH_TYPE entity)
		{
			this.SendPropertyChanging();
			entity.DISH = null;
		}
		
		private void attach_RECIPEs(RECIPE entity)
		{
			this.SendPropertyChanging();
			entity.DISH = this;
		}
		
		private void detach_RECIPEs(RECIPE entity)
		{
			this.SendPropertyChanging();
			entity.DISH = null;
		}
		
		private void attach_SEARCHes(SEARCH entity)
		{
			this.SendPropertyChanging();
			entity.DISH = this;
		}
		
		private void detach_SEARCHes(SEARCH entity)
		{
			this.SendPropertyChanging();
			entity.DISH = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DISH_TYPE")]
	public partial class DISH_TYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _TYPEID;
		
		private EntityRef<DISH> _DISH;
		
		private EntityRef<TYPEDB> _TYPEDB;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnTYPEIDChanging(string value);
    partial void OnTYPEIDChanged();
    #endregion
		
		public DISH_TYPE()
		{
			this._DISH = default(EntityRef<DISH>);
			this._TYPEDB = default(EntityRef<TYPEDB>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._DISH.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TYPEID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TYPEID
		{
			get
			{
				return this._TYPEID;
			}
			set
			{
				if ((this._TYPEID != value))
				{
					if (this._TYPEDB.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTYPEIDChanging(value);
					this.SendPropertyChanging();
					this._TYPEID = value;
					this.SendPropertyChanged("TYPEID");
					this.OnTYPEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISH_DISH_TYPE", Storage="_DISH", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public DISH DISH
		{
			get
			{
				return this._DISH.Entity;
			}
			set
			{
				DISH previousValue = this._DISH.Entity;
				if (((previousValue != value) 
							|| (this._DISH.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DISH.Entity = null;
						previousValue.DISH_TYPEs.Remove(this);
					}
					this._DISH.Entity = value;
					if ((value != null))
					{
						value.DISH_TYPEs.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(string);
					}
					this.SendPropertyChanged("DISH");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TYPEDB_DISH_TYPE", Storage="_TYPEDB", ThisKey="TYPEID", OtherKey="TYPEID", IsForeignKey=true)]
		public TYPEDB TYPEDB
		{
			get
			{
				return this._TYPEDB.Entity;
			}
			set
			{
				TYPEDB previousValue = this._TYPEDB.Entity;
				if (((previousValue != value) 
							|| (this._TYPEDB.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TYPEDB.Entity = null;
						previousValue.DISH_TYPEs.Remove(this);
					}
					this._TYPEDB.Entity = value;
					if ((value != null))
					{
						value.DISH_TYPEs.Add(this);
						this._TYPEID = value.TYPEID;
					}
					else
					{
						this._TYPEID = default(string);
					}
					this.SendPropertyChanged("TYPEDB");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IMAGES")]
	public partial class IMAGE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private int _STEP;
		
		private string _STEP_IMAGE;
		
		private EntityRef<RECIPE> _RECIPE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnSTEPChanging(int value);
    partial void OnSTEPChanged();
    partial void OnSTEP_IMAGEChanging(string value);
    partial void OnSTEP_IMAGEChanged();
    #endregion
		
		public IMAGE()
		{
			this._RECIPE = default(EntityRef<RECIPE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._RECIPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STEP", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int STEP
		{
			get
			{
				return this._STEP;
			}
			set
			{
				if ((this._STEP != value))
				{
					if (this._RECIPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSTEPChanging(value);
					this.SendPropertyChanging();
					this._STEP = value;
					this.SendPropertyChanged("STEP");
					this.OnSTEPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STEP_IMAGE", DbType="NVarChar(150)")]
		public string STEP_IMAGE
		{
			get
			{
				return this._STEP_IMAGE;
			}
			set
			{
				if ((this._STEP_IMAGE != value))
				{
					this.OnSTEP_IMAGEChanging(value);
					this.SendPropertyChanging();
					this._STEP_IMAGE = value;
					this.SendPropertyChanged("STEP_IMAGE");
					this.OnSTEP_IMAGEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RECIPE_IMAGE", Storage="_RECIPE", ThisKey="ID,STEP", OtherKey="ID,STEP", IsForeignKey=true)]
		public RECIPE RECIPE
		{
			get
			{
				return this._RECIPE.Entity;
			}
			set
			{
				RECIPE previousValue = this._RECIPE.Entity;
				if (((previousValue != value) 
							|| (this._RECIPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RECIPE.Entity = null;
						previousValue.IMAGE = null;
					}
					this._RECIPE.Entity = value;
					if ((value != null))
					{
						value.IMAGE = this;
						this._ID = value.ID;
						this._STEP = value.STEP;
					}
					else
					{
						this._ID = default(string);
						this._STEP = default(int);
					}
					this.SendPropertyChanged("RECIPE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RECIPE")]
	public partial class RECIPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private int _STEP;
		
		private string _STEP_DESCRIPTION;
		
		private EntityRef<IMAGE> _IMAGE;
		
		private EntityRef<DISH> _DISH;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnSTEPChanging(int value);
    partial void OnSTEPChanged();
    partial void OnSTEP_DESCRIPTIONChanging(string value);
    partial void OnSTEP_DESCRIPTIONChanged();
    #endregion
		
		public RECIPE()
		{
			this._IMAGE = default(EntityRef<IMAGE>);
			this._DISH = default(EntityRef<DISH>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._DISH.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STEP", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int STEP
		{
			get
			{
				return this._STEP;
			}
			set
			{
				if ((this._STEP != value))
				{
					this.OnSTEPChanging(value);
					this.SendPropertyChanging();
					this._STEP = value;
					this.SendPropertyChanged("STEP");
					this.OnSTEPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STEP_DESCRIPTION", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string STEP_DESCRIPTION
		{
			get
			{
				return this._STEP_DESCRIPTION;
			}
			set
			{
				if ((this._STEP_DESCRIPTION != value))
				{
					this.OnSTEP_DESCRIPTIONChanging(value);
					this.SendPropertyChanging();
					this._STEP_DESCRIPTION = value;
					this.SendPropertyChanged("STEP_DESCRIPTION");
					this.OnSTEP_DESCRIPTIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RECIPE_IMAGE", Storage="_IMAGE", ThisKey="ID,STEP", OtherKey="ID,STEP", IsUnique=true, IsForeignKey=false)]
		public IMAGE IMAGE
		{
			get
			{
				return this._IMAGE.Entity;
			}
			set
			{
				IMAGE previousValue = this._IMAGE.Entity;
				if (((previousValue != value) 
							|| (this._IMAGE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IMAGE.Entity = null;
						previousValue.RECIPE = null;
					}
					this._IMAGE.Entity = value;
					if ((value != null))
					{
						value.RECIPE = this;
					}
					this.SendPropertyChanged("IMAGE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISH_RECIPE", Storage="_DISH", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public DISH DISH
		{
			get
			{
				return this._DISH.Entity;
			}
			set
			{
				DISH previousValue = this._DISH.Entity;
				if (((previousValue != value) 
							|| (this._DISH.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DISH.Entity = null;
						previousValue.RECIPEs.Remove(this);
					}
					this._DISH.Entity = value;
					if ((value != null))
					{
						value.RECIPEs.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(string);
					}
					this.SendPropertyChanged("DISH");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SEARCH")]
	public partial class SEARCH : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _OTHERNAME;
		
		private EntityRef<DISH> _DISH;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnOTHERNAMEChanging(string value);
    partial void OnOTHERNAMEChanged();
    #endregion
		
		public SEARCH()
		{
			this._DISH = default(EntityRef<DISH>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._DISH.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OTHERNAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string OTHERNAME
		{
			get
			{
				return this._OTHERNAME;
			}
			set
			{
				if ((this._OTHERNAME != value))
				{
					this.OnOTHERNAMEChanging(value);
					this.SendPropertyChanging();
					this._OTHERNAME = value;
					this.SendPropertyChanged("OTHERNAME");
					this.OnOTHERNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISH_SEARCH", Storage="_DISH", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public DISH DISH
		{
			get
			{
				return this._DISH.Entity;
			}
			set
			{
				DISH previousValue = this._DISH.Entity;
				if (((previousValue != value) 
							|| (this._DISH.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DISH.Entity = null;
						previousValue.SEARCHes.Remove(this);
					}
					this._DISH.Entity = value;
					if ((value != null))
					{
						value.SEARCHes.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(string);
					}
					this.SendPropertyChanged("DISH");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TYPEDB")]
	public partial class TYPEDB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TYPEID;
		
		private string _TYPEDB_NAME;
		
		private EntitySet<DISH_TYPE> _DISH_TYPEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTYPEIDChanging(string value);
    partial void OnTYPEIDChanged();
    partial void OnTYPEDB_NAMEChanging(string value);
    partial void OnTYPEDB_NAMEChanged();
    #endregion
		
		public TYPEDB()
		{
			this._DISH_TYPEs = new EntitySet<DISH_TYPE>(new Action<DISH_TYPE>(this.attach_DISH_TYPEs), new Action<DISH_TYPE>(this.detach_DISH_TYPEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TYPEID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TYPEID
		{
			get
			{
				return this._TYPEID;
			}
			set
			{
				if ((this._TYPEID != value))
				{
					this.OnTYPEIDChanging(value);
					this.SendPropertyChanging();
					this._TYPEID = value;
					this.SendPropertyChanged("TYPEID");
					this.OnTYPEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TYPEDB_NAME", DbType="NVarChar(60)")]
		public string TYPEDB_NAME
		{
			get
			{
				return this._TYPEDB_NAME;
			}
			set
			{
				if ((this._TYPEDB_NAME != value))
				{
					this.OnTYPEDB_NAMEChanging(value);
					this.SendPropertyChanging();
					this._TYPEDB_NAME = value;
					this.SendPropertyChanged("TYPEDB_NAME");
					this.OnTYPEDB_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TYPEDB_DISH_TYPE", Storage="_DISH_TYPEs", ThisKey="TYPEID", OtherKey="TYPEID")]
		public EntitySet<DISH_TYPE> DISH_TYPEs
		{
			get
			{
				return this._DISH_TYPEs;
			}
			set
			{
				this._DISH_TYPEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DISH_TYPEs(DISH_TYPE entity)
		{
			this.SendPropertyChanging();
			entity.TYPEDB = this;
		}
		
		private void detach_DISH_TYPEs(DISH_TYPE entity)
		{
			this.SendPropertyChanging();
			entity.TYPEDB = null;
		}
	}
}
#pragma warning restore 1591
